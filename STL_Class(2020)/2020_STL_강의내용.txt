


****************************
Wed Apr  1 17:09:17 2020
****************************


#include <iostream>
#include "save.h"

using namespace std;

//1주차 1일 강의 과제

class X {
	int val;
public:
	X() { val = 0; }
	X(int n) :val{ n } {}

	friend ostream& operator << (ostream&, const X&);
};
ostream& operator<<(ostream& os, const X& i) {
	os << i.val;
	return os;
}

void change(X&, X&);

int main() {

	save("main.cpp");

	X a{ 1 };
	X b{ 2 };

	change(a, b);

	cout << a << "," << b << endl;
}

void change(X& a, X& b) {
	X temp{ a };

	a = b;
	b = temp;
}


****************************
Wed Apr  1 17:09:57 2020
****************************


#include <iostream>
#include "save.h"

using namespace std;

//	1주 2일차
//	
//	1. 정수 1000개.txt가 가지는 하드디스크 파일의 크기
//	
//	크기 = 11, 489바이트
//	디스크 할당 크기 = 12, 288바이트
//	그 이유는 이러하다
//	txt파일은 사람이 읽을 수 있는 형태로 저장을 하게된다.
//	왜냐하면 사람이 읽을라고 만든게 txt이니까
//	int는 하나에 4byte이다 그러므로 1000개의 정수를 합하면 4000이 나와야한다.
//	하지만 엔터(\n or endl)하나에 2byte를 차지하기 때문에
//	2x1000 + 4000 = 6000byte로 나와야 한다 하지만
//	실제크기는 그보다 많이 나온다
//	이유가 무엇인가 보아하니
//	txt에 저장할때는 문자로 저장이 된다
//	그렇다면 숫자 하나당 8~10자리정도 되니까
//	char형태의 문자가 10개정도 있다는 것이다
//	그럼 엔터키 포함해서 한줄에 12바이트를 차지하게 되는데
//	
//	
//	2. 이러한 일을 어떻게 처리해야될까 라고 생각해보자
//	int는 int형으로 저장하고 char는 char형으로 저장해야하는데
//	이를 저장하기 위해서 내가 알고있는 것중에는
//	c언어 파일입출력을 배울때 바이너리모드로 저장하는 것이 생각이 났다.
//	그럼 정수 1000개를 바이너리 모드로 저장을 하게되면
//	내가 생각한 크기인 6000바이트 언저리가 나오게 될것이다
//	하지만 여기서 문제는 무엇이냐 하면
//	txt파일을 열어도 사람이 읽을 수 없는 문자로 표현이 되어있을 것이다.
//	예를들어 뚫꽗밣 % ^#$(@# % _이런식으로 문자가 깨져있을 것이다.

int main() {
	save("main.cpp");
}



****************************
Fri Apr 17 16:16:51 2020
****************************


#include <iostream>
#include <vector>
#include <string>
#include <iterator>
#include <algorithm>
#include "save.h"

using namespace std;

int main(){
	vector<string> v;
	string s;

	cout << "단어를마음껏 입력하세요. 끝내려면 Ctrl+z를 입력하세요" << endl;

	while (cin >> s) {
		v.push_back(s);
	}
	cout << "입력 완료되었습니다" << endl;

	sort(begin(v), end(v));

	cout << "정렬 결과를 출력합니다." << endl;
	for (auto&& s : v)
		cout << s << '\t';
	cout << endl;

	save("main.cpp");
}


****************************
Fri Apr 17 16:19:21 2020
****************************


#include <iostream>
#include <vector>
#include <string>
#include <iterator>
#include <algorithm>
#include "save.h"

using namespace std;

int main(){
	cout << "단어를마음껏 입력하세요. 끝내려면 Ctrl+z를 입력하세요" << endl;
	
	vector<string> v{ istream_iterator<string>(cin),istream_iterator<string>() };
	sort(begin(v), end(v));
	copy(begin(v), end(v), ostream_iterator<string>(cout, "\t"));

	save("main.cpp");
}


****************************
Fri Apr 17 16:25:58 2020
****************************


#include <iostream>
#include "String.h"
#include "save.h"

using namespace std;

String g{ "COVID-19" };

int main(){

	String s{ "COVID-19" };

	int n{ 2020 };

	cout << "지역변수 n의 번지 - " << &n << endl;//n은 STACK

	save("main.cpp");
}


****************************
Fri Apr 17 16:36:12 2020
****************************





****************************
Fri Apr 17 17:17:34 2020
****************************





****************************
Fri Apr 17 17:18:21 2020
****************************





****************************
Mon Apr 20 21:52:49 2020
****************************


#include <iostream>
#include <fstream>
#include <vector>
#include <iterator>
#include <random>
#include "save.h"

using namespace std;

int main()
{
	ifstream in("정수 만개");

	vector<int> v;
	copy(istream_iterator<int>(in), istream_iterator<int>(), back_inserter(v));

	int under = count_if(v.begin(), v.end(), [](int n) {
		return n < 10000; 
		});

	cout << under << endl;

	save("main.cpp");
}


****************************
Mon Apr 20 22:56:06 2020
****************************


#include <iostream>
#include <fstream>
#include <vector>
#include <iterator>
#include <random>
#include "String.h"
#include "save.h"

using namespace std;

int main()
{
	ifstream in("정수 만개");

	vector<int> v;
	copy(istream_iterator<int>(in), istream_iterator<int>(), back_inserter(v));

	int under = count_if(v.begin(), v.end(), [](int n) {
		return n < 10000;
		});

	cout << under << endl;

	save("main.cpp");
}


****************************
Mon Apr 20 23:20:36 2020
****************************


#include <iostream>
#include <fstream>
#include <vector>
#include <iterator>
#include <random>
#include "String.h"
#include "save.h"

using namespace std;

int main()
{
	ifstream in("정수 만개");

	vector<int> v;
	v.reserve(10000);
	copy(istream_iterator<int>(in), istream_iterator<int>(), back_inserter(v));

	int under = count_if(v.begin(), v.end(), [](const int& n) {
		return n < 10000;
		});

	cout << under << endl;

	save("main.cpp");
}

//int main() {
//	ifstream in("정수 만개");
//
//	vector<int> v;
//
//	int n;
//	while (!in.eof()) {
//		in >> n;
//		v.emplace_back(n);
//	}
//
//	int under = count_if(v.begin(), v.end(), [](const int& n) {
//		return n < 10000;
//		});
//
//	cout << under << endl;
//}


****************************
Tue Apr 21 15:17:16 2020
****************************


// forward_list의 제일 뒤에 원소를 삽입한다
#include <iostream>
#include <forward_list>
#include "String.h"
#include "save.h"
using namespace std;

int main()
{
	forward_list<String> numbers{ "1", "22", "333" };
	auto bb = numbers.before_begin(); // bb는 "1"이전의 위치를 가리킴

	numbers.insert_after(bb, "0"); // 제일 앞에 "0" 삽입
	numbers.emplace_front("-1"); // 제일 앞에 -1 생성삽입

	int size = distance(numbers.cbegin(), numbers.cend()); // 원소의 갯수

	forward_list<String>::iterator p{ numbers.begin() };
		advance(p, size - 1); // String("333")을 가리키도록 p를 이동

	auto last = numbers.emplace_after(p, "4444");
	// p 다음에 String("4444")를 생성삽입
	// 함수의 반환값을 이용하면 계속 원소를 뒤에 추가할 수 있다

	last = numbers.emplace_after(last, "55555");
	// 제일뒤에 String("55555")를 생성삽입


	cout << "관찰메시지 없음" << endl;
	cout << endl;

	cout << "forward_list가 담을 수 있는 최대 원소 개수: "
		<< numbers.max_size() << endl;

	cout << "forward_list의 원소 수: "
		<< distance(numbers.begin(), numbers.end()) << endl;

	cout << endl;
	cout << "forward_list의 원소 출력" << endl;

	for (auto& number : numbers)
		cout << number << ' ';

	cout << endl;
	cout << endl;

	save("main.cpp");
}



****************************
Tue Apr 21 15:24:41 2020
****************************


// forward_list의 제일 뒤에 원소를 삽입한다
#include <iostream>
#include <list>
#include "String.h"
#include "save.h"
using namespace std;

int main()
{
	list<String> words{ "공무원", "고강도", "거리두기", "한주", "더..", "교실", "수업은", "시기상조" };
	// 여기에서 “고강도”를 제거하자
	
	words.erase(remove(words.begin(), words.end(), String("고강도")), words.end());
	
	//list<String>::const_iterator i = words.cbegin();
	for (auto i = words.cbegin(); i != words.cend(); ++i)
		cout << *i << endl;
	save("main.cpp");
}



****************************
Tue Apr 21 15:27:22 2020
****************************


// forward_list의 제일 뒤에 원소를 삽입한다
#include <iostream>
#include <random>
#include <list>
#include "String.h"
#include "save.h"
using namespace std;

int main()
{
	default_random_engine engine;
	uniform_int_distribution<> uid{ 0, 10 };
	list<int> numbers;

	for (int i = 0; i < 100; ++i)
		numbers.emplace_back(uid(engine));

	for (auto i = numbers.cbegin(); i != numbers.cend(); ++i)
		cout << *i << ' ';
	cout << endl;

	// numbers에서 0을 제거하라
	numbers.remove(0);

	cout << endl;
	cout << "0를 제거한 후 numbers의 원소 수: " << numbers.size() << endl;
	
	for (auto i = numbers.cbegin(); i != numbers.cend(); ++i)
		cout << *i << ' ';
	cout << endl;

	save("main.cpp");
}



****************************
Tue Apr 21 15:28:36 2020
****************************


// list의 splice와 merge

#include <iostream>
#include <list>
#include <algorithm>
#include <string>
#include "save.h"

using namespace std;

void print(string name, list<int>& cont); // list 내용 화면출력

int main()
{
	list<int> odd{ 5, 1, 3, 9, 7 };
	list<int> even{ 2, 6, 10, 4, 8 };
	list<int> num;

	cout << "--- 컨테이너의 원소 출력 ---" << endl;
	print("odd: ", odd);
	print("even: ", even);
	print("num: ", num);

	// odd와 even을 num에 merge한다
	num.merge(odd);
	num.merge(even);

	cout << endl << "--- merge 결과 ---" << endl;

	print("odd: ", odd);
	print("even: ", even);
	print("num: ", num);

	// num의 일부 원소를 part에 splice
	list<int> part;
	part.splice(part.begin(), num, ++++num.begin(), ------num.end());

	cout << endl << "--- splice 결과 ---" << endl;

	print("num: ", num);
	print("part: ", part);

	save("main.cpp");
}

void print(string name, list<int>& cont)
{
	cout << name;
	for (int n : cont)
		cout << n << ' ';
	cout << endl;
}


****************************
Fri Apr 24 21:21:11 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };

int main()
{
	// file 읽기
	ifstream in(file);
	if (!in) {
		cout << file << " 파일 열기 실패" << endl;
		return 0;
	}

	vector<char> v = { istreambuf_iterator<char>(in),istreambuf_iterator<char>() };

	for (char i : v)
		cout << i;
	save("main.cpp");
}


****************************
Fri Apr 24 21:22:04 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };

int main()
{
	// file 읽기
	ifstream in(file);
	if (!in) {
		cout << file << " 파일 열기 실패" << endl;
		return 0;
	}

	vector<char> v = { istreambuf_iterator<char>(in),istreambuf_iterator<char>() };
	
	reverse(v.begin(), v.end());

	for (char i : v)
		cout << i;
	save("main.cpp");
}


****************************
Fri Apr 24 21:29:53 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
string out_file{ "STL Wiki e제거.txt"s };
int main()
{
	// file 읽기
	ifstream in(file);
	ofstream out(file);
	vector<char> v = { istreambuf_iterator<char>(in),istreambuf_iterator<char>() };
	
	v.erase(remove_if(v.begin(), v.end(), [](char a) {return a == 'e'; }),v.end());

	int ch;
	while ((ch = in.get()) != EOF)
		out.put(ch);
	save("main.cpp");
}


****************************
Fri Apr 24 21:30:43 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
string out_file{ "STL Wiki e제거.txt"s };
int main()
{
	// file 읽기
	ifstream in(file);
	ofstream out(file);
	vector<char> v = { istreambuf_iterator<char>(in),istreambuf_iterator<char>() };
	
	v.erase(remove_if(v.begin(), v.end(), [](char a) {return a == 'e'; }),v.end());

	int ch;
	while ((ch = in.get()) != EOF)
		out.put(ch);
	save("main.cpp");
}


****************************
Fri Apr 24 21:31:44 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
string out_file{ "STL Wiki e제거.txt"s };
int main()
{
	// file 읽기
	ifstream in(file);
	ofstream out(out_file);
	vector<char> v = { istreambuf_iterator<char>(in),istreambuf_iterator<char>() };
	
	v.erase(remove_if(v.begin(), v.end(), [](char a) {return a == 'e'; }),v.end());

	int ch;
	while ((ch = in.get()) != EOF)
		out.put(ch);
	save("main.cpp");
}


****************************
Fri Apr 24 21:36:30 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
string out_file{ "STL Wiki e제거.txt"s };
int main()
{
	// file 읽기
	ifstream in(file);
	ofstream out(out_file);
	vector<char> v = { istreambuf_iterator<char>(in),istreambuf_iterator<char>() };
	
	v.erase(remove_if(v.begin(), v.end(), [](char a) {return a == 'e'; }),v.end());

	for(char i : v)
		out << i;
	save("main.cpp");
}


****************************
Fri Apr 24 21:47:01 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
int main()
{
	// file 읽기
	ifstream in(file);

	vector<char> v = { istreambuf_iterator<char>(in),istreambuf_iterator<char>() };
	
	int words = count_if(v.begin(), v.end(), [](char a) {
		cout << a << endl;
		return a == ' ';
		});

	cout << words << endl;
	save("main.cpp");
}


****************************
Fri Apr 24 21:47:47 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
int main()
{
	// file 읽기
	ifstream in(file);

	vector<char> v = { istreambuf_iterator<char>(in),istreambuf_iterator<char>() };
	
	int words = count_if(v.begin(), v.end(), [](char a) {
		return a == ' ';
		});

	cout << words << endl;
	save("main.cpp");
}


****************************
Fri Apr 24 21:48:33 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
int main()
{
	// file 읽기
	ifstream in(file);

	vector<char> v = { istreambuf_iterator<char>(in),istreambuf_iterator<char>() };
	
	int words = count_if(v.begin(), v.end(), [](char a) {
		return (a == ' ')||(a == '\n');
		});

	cout << words << endl;
	save("main.cpp");
}


****************************
Fri Apr 24 22:48:57 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
int main()
{
	// file 읽기
	ifstream in(file);

	vector<string> v = { istream_iterator<string>(in),istream_iterator<string>() };
	
	sort(v.begin(), v.end(), [](const string& a, const string& b) {
		return size(a) < size(b);
		});

	for (const string& a : v)
		cout << a;

	save("main.cpp");
	//실습 5
}


****************************
Fri Apr 24 22:51:24 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
int main()
{
	// file 읽기
	ifstream in(file);

	vector<string> v = { istream_iterator<string>(in),istream_iterator<string>() };
	
	sort(v.begin(), v.end(), [](const string& a, const string& b) {
		return a < b;
		});

	for (const string& a : v)
		cout << a << " ";

	save("main.cpp");
	//실습 4
}


****************************
Fri Apr 24 22:52:52 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
int main()
{
	// file 읽기
	ifstream in(file);

	vector<string> v = { istream_iterator<string>(in),istream_iterator<string>() };
	
	int the = count_if(v.begin(), v.end(), [](const string& a) {
		if (a == "the")
			return true;
		else
			return false;
		});

	cout << the;

	save("main.cpp");
	//실습 4
}


****************************
Fri Apr 24 22:53:03 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
int main()
{
	// file 읽기
	ifstream in(file);

	vector<string> v = { istream_iterator<string>(in),istream_iterator<string>() };
	
	int the = count_if(v.begin(), v.end(), [](const string& a) {
		if (a == "the")
			return true;
		else
			return false;
		});

	cout << the;

	save("main.cpp");
	//실습 6
}


****************************
Fri Apr 24 22:53:24 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
int main()
{
	// file 읽기
	ifstream in(file);

	vector<string> v = { istream_iterator<string>(in),istream_iterator<string>() };
	
	int the = count_if(v.begin(), v.end(), [](const string& a) {
		if (a.length() == 5)
			return true;
		else
			return false;
		});

	cout << the;

	save("main.cpp");
	//실습 7
}


****************************
Fri Apr 24 22:59:34 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
string out_file{ "STL Wiki에서 5글자로 된 단어.txt"s };
int main()
{
	// file 읽기
	ifstream in(file);
	
	ofstream out(out_file);

	vector<string> v = { istream_iterator<string>(in),istream_iterator<string>() };
	
	int cnt = 0;
	for (const string& a : v) {
		
		if (a.length() == 5) {
			out << a << ' ';
			cnt++;
		if (cnt % 12 == 0)
			out << endl;
		}
	}
	save("main.cpp");
	//실습 7
}


****************************
Fri Apr 24 23:04:15 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };

int main()
{
	// file 읽기
	ifstream in(file);

	vector<string> v = { istream_iterator<string>(in),istream_iterator<string>() };
	
	for (string a : v) {
		reverse(a.begin(), a.end());
		cout << a<<' ';
	}
	save("main.cpp");
	//실습 3번
}


****************************
Sat Apr 25 00:58:28 2020
****************************


#include <iostream>
#include <iterator>
#include <fstream>
#include <string>
#include <vector>
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
string out_file{ "STL Wiki e제거.txt"s };

int main()
{
	// file 읽기
	ifstream in(file);
	ofstream out(out_file);

	vector<char> str = { istreambuf_iterator<char>(in),istreambuf_iterator<char>() };

	str.erase(remove_if(str.begin(), str.end(), [](char a) {return a == 'e'; }),str.end());

	for (char a : str)
		cout << a;
	save("main.cpp");
}


****************************
Sat Apr 25 00:58:43 2020
****************************


#include <iostream>
#include <iterator>
#include <fstream>
#include <string>
#include <vector>
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
string out_file{ "STL Wiki e제거.txt"s };

int main()
{
	// file 읽기
	ifstream in(file);
	ofstream out(out_file);

	vector<char> str = { istreambuf_iterator<char>(in),istreambuf_iterator<char>() };

	str.erase(remove_if(str.begin(), str.end(), [](char a) {return a == 'e'; }),str.end());

	for (char a : str)
		out << a;
	save("main.cpp");
}


****************************
Sat Apr 25 01:01:01 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
string out_file{ "STL Wiki에서 5글자로 된 단어.txt"s };
int main()
{
	// file 읽기
	ifstream in(file);

	ofstream out(out_file);

	vector<string> v = { istream_iterator<string>(in),istream_iterator<string>() };

	cout << size(v);
	save("main.cpp");
	//실습 7
}


****************************
Sat Apr 25 01:02:16 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
string out_file{ "STL Wiki에서 5글자로 된 단어.txt"s };
int main()
{
	// file 읽기
	ifstream in(file);

	ofstream out(out_file);

	vector<string> v = { istream_iterator<string>(in),istream_iterator<string>() };

	for (string a : v) {
		reverse(a.begin(), a.end());
		cout << a;
	}

	save("main.cpp");
}


****************************
Sat Apr 25 01:02:25 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };
string out_file{ "STL Wiki에서 5글자로 된 단어.txt"s };
int main()
{
	// file 읽기
	ifstream in(file);

	ofstream out(out_file);

	vector<string> v = { istream_iterator<string>(in),istream_iterator<string>() };

	for (string a : v) {
		reverse(a.begin(), a.end());
		cout << a << ' ';
	}

	save("main.cpp");
}


****************************
Sat Apr 25 01:02:46 2020
****************************


#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <iterator>
#include <algorithm>
#include "String.h"
#include "save.h"

using namespace std;

string file{ "STL Wiki.txt"s };

int main()
{
	// file 읽기
	ifstream in(file);

	vector<string> v = { istream_iterator<string>(in),istream_iterator<string>() };

	for (string a : v) {
		reverse(a.begin(), a.end());
		cout << a << ' ';
	}

	save("main.cpp");
}